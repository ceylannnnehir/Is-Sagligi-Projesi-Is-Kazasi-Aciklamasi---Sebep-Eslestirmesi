import nltk
from nltk.tokenize import word_tokenize
from collections import Counter
import matplotlib.pyplot as plt
import numpy as np

# Gerekli NLTK kaynaklarÄ± (bir kez indirilmesi yeterli)
nltk.download('punkt')

# Ham veri dosyasÄ±nÄ± oku
with open("merge.txt", "r", encoding="utf-8") as f:
    text = f.read()

# Tokenization (sadece alfabetik kelimeleri al)
tokens = [token.lower() for token in word_tokenize(text) if token.isalpha()]

# Kelime frekanslarÄ±nÄ± say
word_freq = Counter(tokens)

# SÄ±ralÄ± frekans listesi (en sÄ±k olandan az sÄ±ka)
sorted_freq = word_freq.most_common()

# Rank ve frekans deÄŸerlerini ayÄ±kla
ranks = np.arange(1, len(sorted_freq) + 1)
frequencies = np.array([freq for _, freq in sorted_freq])

# Log-Log grafiÄŸi Ã§iz
plt.figure(figsize=(10, 6))
plt.loglog(ranks, frequencies, marker=".")
plt.title("Zipf YasasÄ± - Ham Veri Ãœzerinden")
plt.xlabel("Kelime SÄ±rasÄ± (Rank) [log]")
plt.ylabel("Kelime FrekansÄ± [log]")
plt.grid(True, which="both", linestyle='--', linewidth=0.5)
plt.tight_layout()

# ğŸ”½ Grafik dosyasÄ±nÄ± kaydet (PNG formatÄ±nda)
plt.savefig("zipf_plot.png", dpi=300)

# GrafiÄŸi gÃ¶ster
plt.show()

# Kelime sayÄ±sÄ± bilgisi
print(f"Toplam alfabetik kelime sayÄ±sÄ±: {len(tokens)}")
print(f"Benzersiz kelime sayÄ±sÄ±: {len(word_freq)}")
print("Grafik 'zipf_plot.png' olarak kaydedildi.")
